#GREP

grep (global regular expression print) is set of commands that search input files for a search string, and print the lines that match it. Basically, starting at the beginning of the first line in the file, grep copies a line into a buffer, compares it to the search. If the comparison passes, it is printed to the screen. Repeat until the file runs out of lines. grep does not stores, modify, or search part of a line.

##Useful tips:

+ grep **-n** "boo" a_file : yields the line number of the matched string
    + 1: boot
    + 2: book
    + 5: boots
+ grep **-vn** "boo" a_file : prints the negative result (prints all the lines that do not match the string)
+ grep **-c** "boo" a_file : outputs the total number of lines that match the query
+ grep **-l** "boo" * : prints only the filenames of files in the query that contain the search string.
+ grep **-i** "BOO" a_file : case-insensitiveve of search string
+ grep **-x** "boo" a_file : EXACT matches only
+ grep **-f** : if you have to search for a complex string
    + echo "Iadsvf asfdbvadf asdv" > search
    + grep **-f** search a_file

####REGULAR EXPRESSION AND GREP

grep can also search for regular expression in addition to normal strings.

ex: grep "e$" a_file : finds lines ending in the letter 'e'

##egrep
+ egrep = extended grep

+ While grep supports some regex commands, it doesn't support sequences like + and ? operators. To use these, you have to use extended grep. 

Comparison: grep vs egrep

The ? operator matches 1 or 0 occurences of the previous character.

```
grep "boots?" a_file OR  egrep "boot|boots"
 #=> boot
 #=>boots
```

##fgrep
+ fgrep = fast grep
+ fgrep is faster than other grep commands because it doesn't interpret any regular expressions.
+ if using only literal strings, it's better to use fgrep than grep.

###Other instances where we use grep
+ to kill a zombie shotgun
    +  ps ax | grep shotgun


